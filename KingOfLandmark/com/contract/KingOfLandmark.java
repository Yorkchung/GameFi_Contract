package com.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class KingOfLandmark extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_ATTACKNFT = "AttackNFT";

    public static final String FUNC_ATTACKNFT_EXIST = "AttackNFT_exist";

    public static final String FUNC_ATTACK_BALANCE = "Attack_balance";

    public static final String FUNC_LANDNFT = "LandNFT";

    public static final String FUNC_PROTECTNFT = "ProtectNFT";

    public static final String FUNC_PROTECTNFT_EXIST = "ProtectNFT_exist";

    public static final String FUNC_PROTECT_BALANCE = "Protect_balance";

    public static final String FUNC_ALLIANCE = "alliance";

    public static final String FUNC_ATTACKHISTORY = "attackhistory";

    public static final String FUNC_BECOMEKING_ERC20 = "becomeking_ERC20";

    public static final String FUNC_BECOMEKING_NFT = "becomeking_NFT";

    public static final String FUNC_GETLANDURI = "getLandURI";

    public static final String FUNC_INITLANDMARK = "initLandmark";

    public static final String FUNC_LANDS = "lands";

    public static final String FUNC_LIFE = "life";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_POSITION = "position";

    public static final String FUNC_PROTECT_ERC20 = "protect_ERC20";

    public static final String FUNC_PROTECT_NFT = "protect_NFT";

    public static final String FUNC_SETALLIANCE = "setAlliance";

    public static final String FUNC_SETATTACKCONTRACT = "setAttackContract";

    public static final String FUNC_SETLANDNFT = "setLandNFT";

    public static final String FUNC_SETLANDMARKNAME = "setLandmarkName";

    public static final String FUNC_SETPOSITION = "setPosition";

    public static final String FUNC_SETPRICE = "setPrice";

    public static final String FUNC_SETPROTECTCONTRACT = "setProtectContract";

    public static final String FUNC_TOKENBALANCE = "tokenbalance";

    @Deprecated
    protected KingOfLandmark(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected KingOfLandmark(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected KingOfLandmark(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected KingOfLandmark(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> AttackNFT() {
        final Function function = new Function(FUNC_ATTACKNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> AttackNFT_exist(BigInteger param0) {
        final Function function = new Function(FUNC_ATTACKNFT_EXIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> Attack_balance() {
        final Function function = new Function(FUNC_ATTACK_BALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> LandNFT() {
        final Function function = new Function(FUNC_LANDNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ProtectNFT() {
        final Function function = new Function(FUNC_PROTECTNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> ProtectNFT_exist(BigInteger param0) {
        final Function function = new Function(FUNC_PROTECTNFT_EXIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> Protect_balance() {
        final Function function = new Function(FUNC_PROTECT_BALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> alliance(String site) {
        final Function function = new Function(FUNC_ALLIANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(site)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>> attackhistory(String param0) {
        final Function function = new Function(FUNC_ATTACKHISTORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> becomeking_ERC20(String _alliance, String site,BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BECOMEKING_ERC20, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_alliance), 
                new org.web3j.abi.datatypes.Utf8String(site)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function,weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> becomeking_NFT(String site, BigInteger tokenId, String _alliance,BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BECOMEKING_NFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(site), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(_alliance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function,weiValue);
    }

    public RemoteFunctionCall<String> getLandURI(String site) {
        final Function function = new Function(FUNC_GETLANDURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(site)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initLandmark(String _name, String _position, String site, BigInteger _nft) {
        final Function function = new Function(
                FUNC_INITLANDMARK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_position), 
                new org.web3j.abi.datatypes.Utf8String(site), 
                new org.web3j.abi.datatypes.generated.Uint256(_nft)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple9<String, BigInteger, BigInteger, BigInteger, String, String, String, BigInteger, Boolean>> lands(String param0) {
        final Function function = new Function(FUNC_LANDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple9<String, BigInteger, BigInteger, BigInteger, String, String, String, BigInteger, Boolean>>(function,
                new Callable<Tuple9<String, BigInteger, BigInteger, BigInteger, String, String, String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple9<String, BigInteger, BigInteger, BigInteger, String, String, String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<String, BigInteger, BigInteger, BigInteger, String, String, String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (Boolean) results.get(8).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> life(String site) {
        final Function function = new Function(FUNC_LIFE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(site)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name(String site) {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(site)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner(String site) {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(site)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> position(String site) {
        final Function function = new Function(FUNC_POSITION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(site)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> protect_ERC20(String site,BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PROTECT_ERC20, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(site)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function,weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> protect_NFT(String site, BigInteger tokenId,BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PROTECT_NFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(site), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function,weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> setAlliance(String _alliance, String site) {
        final Function function = new Function(
                FUNC_SETALLIANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_alliance), 
                new org.web3j.abi.datatypes.Utf8String(site)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAttackContract(String tokenAddress) {
        final Function function = new Function(
                FUNC_SETATTACKCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, tokenAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLandNFT(String tokenAddress) {
        final Function function = new Function(
                FUNC_SETLANDNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, tokenAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLandmarkName(String _name, String site) {
        final Function function = new Function(
                FUNC_SETLANDMARKNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(site)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPosition(String _position, String site) {
        final Function function = new Function(
                FUNC_SETPOSITION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_position), 
                new org.web3j.abi.datatypes.Utf8String(site)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPrice(BigInteger _value, String _address, String site) {
        final Function function = new Function(
                FUNC_SETPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.Address(160, _address), 
                new org.web3j.abi.datatypes.Utf8String(site)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setProtectContract(String tokenAddress) {
        final Function function = new Function(
                FUNC_SETPROTECTCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, tokenAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> tokenbalance(String site) {
        final Function function = new Function(FUNC_TOKENBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(site)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static KingOfLandmark load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new KingOfLandmark(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static KingOfLandmark load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new KingOfLandmark(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static KingOfLandmark load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new KingOfLandmark(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static KingOfLandmark load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new KingOfLandmark(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<KingOfLandmark> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(KingOfLandmark.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<KingOfLandmark> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(KingOfLandmark.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<KingOfLandmark> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(KingOfLandmark.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<KingOfLandmark> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(KingOfLandmark.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
